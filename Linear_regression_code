"""
Consider the Iris data. This data includes 4 features, which we call f1, f2, f3 and f4 for short.
We want to use linear regression to build a linear model that predicts f3 feature (petal length) using three other features (ie sepal length, sepal width and petal width).

Read README for more. 

Step One: Load Data
"""

import numpy as np
import pandas as pd

# Sample data
data = {
    'f0': [1, 1, 1, 1, 1, 1, 1],
    'f1': [5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 5.1],
    'f2': [3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4],
    'f4': [0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.2],
    'f3': [1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.5]
}

# Convert to DataFrame
dataset = pd.DataFrame(data)

"""Step Two: Split data into training and testing sets"""

# Function to split data into training and testing sets
X = dataset[['f0', 'f1', 'f2', 'f4']].values
y = dataset['f3'].values

print("X: ", X)
print("y: ", y)

from sklearn.model_selection import train_test_split
# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2857, random_state=42)

"""Step Three: Calculate the parameters of linear regression"""

X_train_T = X_train.T
X_train_T_X_inv = np.linalg.inv(X_train_T @ X_train)
w = X_train_T_X_inv @ X_train_T @ y_train
print("w is: ", w)

"""Step Four: Now that we have derived the model parameters, we test the test data to obtain the error function"""

# Now the linear regression model is this:
# t = 1.038 + 0.177*f1 â€“ 0.168*f2 + 0.464*f4
# now we have to determine the output of the test set.

"""We obtain a prediction for our tests"""

# Make predictions on the test set
y_pred = X_test @ w

# Function to calculate Mean Squared Error (MSE)
def mean_squared_error_mine(y_true, y_pred):
    n_samples = len(y_true)
    squared_errors = np.square(y_true - y_pred)
    mse = np.mean(squared_errors)
    return mse

# Calculate MSE using the defined function
mse = mean_squared_error_mine(y_test, y_pred)
print("Mean Squared Error (MSE):", mse)

from sklearn.metrics import mean_squared_error
# Calculate MSE using sklearn function
mse_sklearn = mean_squared_error(y_test, y_pred)
print("Mean Squared Error (MSE) with sklearn:", mse_sklearn)

"""To calculate the average, we can also proceed with the following step"""

mse_values = []  # Initialize mse_values list

for i in range(len(y_test)):
    t = w[0] + w[1]*X_test[i, 1] + w[2]*X_test[i, 2] + w[3]*X_test[i, 3]
    mse = mean_squared_error([y_test[i]], [t])  # Wrap in lists to create arrays
    mse_values.append(mse)

# Calculate average MSE
average_mse = np.mean(mse_values)

# Print out the average MSE
print("Average Mean Squared Error (MSE):", average_mse)

"""And so far we have obtained the average."""
